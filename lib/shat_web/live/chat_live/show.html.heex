<div class="flex flex-col h-[calc(100vh-95px)] bg-gray-700 mt-20 rounded-lg dark:bg-gray-800">
  <!-- Cabeçalho do Chat -->
  <div class="text-center pt-4">
    <h1 class="text-2xl text-gray-800 dark:text-white">
      Código do chat: {@room.name}
    </h1>
  </div>
  <!-- Mensagens -->
  <div id="messages" phx-update="stream" class="flex-1 overflow-y-auto p-4 space-y-4">
    <div
      :for={{dom_id, message} <- @streams.messages}
      id={dom_id}
      class="flex items-start gap-2.5"
    >
      <!-- Mensagem -->
      <div class="flex w-full justify-between">
        <div class="flex flex-col gap-1 w-full">
          <!-- Informações do Usuário -->
          <div class={
            if message.user.id == @user.id,
              do: "flex items-center justify-end space-x-2 rtl:space-x-reverse",
              else: "flex items-center justify-start space-x-2"
          }>
            <span class="text-sm font-semibold text-gray-900 dark:text-white">
              {message.user.name}
            </span>
            <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
              {message.inserted_at}
            </span>
          </div>
          <!-- Conteúdo da Mensagem -->
          <div class={
            if message.user.id == @user.id,
              do:
                "leading-1.5 px-3 py-2 bg-blue-600 text-white rounded-l-xl rounded-tr-xl max-w-[70%] w-fit justify-center ml-auto",
              else:
                "leading-1.5 px-3 py-2 bg-gray-100 text-gray-900 rounded-e-xl rounded-es-xl dark:bg-gray-700 dark:text-white max-w-[70%] w-fit"
          }>
            <p class="text-sm font-normal break-words">
              {message.content}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Formulário de Envio -->
  <div class="p-4 bg-gray-800 rounded-b-lg dark:bg-gray-700">
    <form phx-submit="send_message" class="flex items-center gap-4">
      <input
        name="content"
        placeholder="Digite sua mensagem (até 1024 caracteres)"
        autocomplete="off"
        class="flex-1 px-4 py-3 border border-gray-700 rounded-lg shadow-sm bg-gray-700 text-white
        placeholder-gray-500 focus:outline-none focus:ring focus:border-blue-500 resize-none dark:bg-gray-600 dark:text-white dark:placeholder-gray-400"
      />
      <button
        type="submit"
        class="w-12 h-12 flex items-center justify-center bg-blue-700 hover:bg-blue-800 text-white rounded-full
        shadow-md hover:bg-blue-500 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600
        dark:hover:bg-blue-700 dark:focus:ring-blue-800"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="w-5 h-5"
        >
          <path d="M3.478 2.404a.75.75 0 0 0-.926.941l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.404Z" />
        </svg>
      </button>
    </form>
  </div>
</div>
<script>
  const audio = new Audio('../sounds/notification.mp3');
  const chatContainer = document.getElementById('messages');
  const scrollDownChat = () => {
    chatContainer.scrollTop = chatContainer.scrollHeight
  }

  const observer = new MutationObserver((mutationsList) => {
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        // Verifica se novos nós foram adicionados
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE && node.id.startsWith('messages-')) {
            // Exibe o alerta quando encontrar o elemento com o ID desejado
            scrollDownChat()
            audio.play().catch((err) => {return;});
          }
        });
      }
    }
  });

  scrollDownChat()
  observer.observe(chatContainer, { childList: true });
</script>
